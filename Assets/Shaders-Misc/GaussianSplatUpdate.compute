#pragma kernel UpdateGaussians

// Buffers
StructuredBuffer<float3> VertexBuffer;   // SMPL-X vertex positions
StructuredBuffer<uint> FaceBuffer;      // SMPL-X face indices (uint to match SV_DispatchThreadID type)
RWStructuredBuffer<float3> GaussianPositions; // Output: Gaussian positions
RWStructuredBuffer<float4> GaussianRotations; // Output: Gaussian rotations
RWStructuredBuffer<float3> GaussianScales;    // Output: Gaussian scales

// Constants
int _NumFaces;

// Helper functions
float3 CrossProduct(float3 a, float3 b) {
    return float3(
        a.y * b.z - a.z * b.y,
        a.z * b.x - a.x * b.z,
        a.x * b.y - a.y * b.x
    );
}

[numthreads(256, 1, 1)]
void UpdateGaussians(uint id : SV_DispatchThreadID) {
    if (id >= (uint)_NumFaces) return;

    // Face indices
    uint i0 = FaceBuffer[id * 3 + 0];
    uint i1 = FaceBuffer[id * 3 + 1];
    uint i2 = FaceBuffer[id * 3 + 2];

    // Vertex positions
    float3 v0 = VertexBuffer[i0];
    float3 v1 = VertexBuffer[i1];
    float3 v2 = VertexBuffer[i2];

    // Compute face center (Gaussian position)
    float3 faceCenter = (v0 + v1 + v2) / 3.0;
    GaussianPositions[id] = faceCenter;

    // Compute rotation (normal direction)
    float3 vec1 = normalize(v2 - v1);
    float3 vec2 = normalize(v0 - v1);
    float3 normal = normalize(CrossProduct(vec1, vec2));
    GaussianRotations[id] = float4(normal, 1.0); // Placeholder rotation quaternion

    // Compute scaling (based on face area)
    float3 crossVec = CrossProduct(vec1, vec2);
    float area = length(crossVec) * 0.5;
    GaussianScales[id] = float3(area, area, area);
}
