#include "Quaternion.hlsl"
#pragma kernel CalcFacesTransform
#pragma kernel MapGaussiansToFaces


// Constants for scaling activation
#define MIN_S_VALUE 0.0f
#define MAX_S_VALUE 0.1f

// Buffers
StructuredBuffer<float3> VertexBuffer;       // Vertex positions
StructuredBuffer<int3> FaceBuffer;          // Faces (indices of vertices)
StructuredBuffer<int> GaussianToFaceBuffer; // Mapping from Gaussian to face indices
StructuredBuffer<float3> HahaXyzBuffer;     // Original Gaussian positions
StructuredBuffer<float4> HahaRotationBuffer; // Original Gaussian rotations
StructuredBuffer<float3> HahaScalingBuffer;  // Original Gaussian scaling
RWStructuredBuffer<float3> TBuffer;         // Translations (output)
RWStructuredBuffer<float4> RBuffer;         // Rotations as quaternions (output)
RWStructuredBuffer<float> kBuffer;          // Scaling factors (output)
RWStructuredBuffer<float3> tempBuffer;          // Scaling factors (output)
// Combined Gaussian-specific buffer
struct GaussianData
{

    float4 rotation;    
    float3 scaling;      
};
RWStructuredBuffer<GaussianData> GaussianDataBuffer; // Combined buffer

RWStructuredBuffer<float3> UpdatedXyzBuffer;    // Updated Gaussian positions
RWStructuredBuffer<float3> UpdatedScalingBuffer;    // Updated Gaussian scaling
RWStructuredBuffer<float4> UpdatedRotationBuffer;    // Updated Gaussian rotation

// Constants
#define MAX_SCALE 0.05f

// Scaling activation function
float3 s_act(float3 x)
{
    return MIN_S_VALUE + (1.0 / (1.0 + exp(-x) + 1e-6)) * (MAX_S_VALUE - MIN_S_VALUE);
}
float3 normalize_safe(float3 v)
{
    float len = length(v) + 1e-6; // Add a small epsilon to avoid division by zero
    return v / len;
}

float3 rotate_vector_new(float3 v, float4 q)
{
    // Quaternion rotation: q * v * q^-1
    float3 t = 2.0 * cross(q.xyz, v);
    return v + q.w * t + cross(q.xyz, t);
}
float3 hard_sigmoid(float3 x)
{
    return clamp(0.2 * x + 0.5, 0.0, 1.0);
}
// Raw quaternion multiplication
float4 quaternion_raw_multiply(float4 a, float4 b)
{
    float aw = a.x, ax = a.y, ay = a.z, az = a.w;
    float bw = b.x, bx = b.y, by = b.z, bz = b.w;

    float ow = aw * bw - ax * bx - ay * by - az * bz;
    float ox = aw * bx + ax * bw + ay * bz - az * by;
    float oy = aw * by - ax * bz + ay * bw + az * bx;
    float oz = aw * bz + ax * by - ay * bx + az * bw;

    return float4(ow, ox, oy, oz);
}
// Quaternion application
float3 QuaternionApply(float4 quaternion, float3 points) {
    float qw = quaternion.x;
    float qx = quaternion.y;
    float qy = quaternion.z;
    float qz = quaternion.w;

    float3 u = float3(qx, qy, qz);
    float dotUP = dot(u, points); 
    float dotUU = dot(u, u);
    float3 crossUP = cross(u, points);

    float3 rotatedPoint = 2.0 * dotUP * u +
                          (qw * qw - dotUU) * points +
                          2.0 * qw * crossUP;

    return rotatedPoint;
}
// Standardize quaternion to ensure non-negative real part
float4 standardize_quaternion(float4 q)
{
    if (q.x < 0.0)
    {
        q = -q; // Flip all components if real part is negative
    }
    return q;
}
float3x3 Quaternion_WxyzToMatrix(float4 q)
{
    // Interpret q as (w, x, y, z):
    float w = q.x;
    float x = q.y;
    float y = q.z;
    float z = q.w;

    // Precompute products
    float xx = x * x;
    float yy = y * y;
    float zz = z * z;
    float xy = x * y;
    float xz = x * z;
    float yz = y * z;
    float wx = w * x;
    float wy = w * y;
    float wz = w * z;

    // Build a rotation matrix in row-major form
    float3x3 M;

    // Row 0
    M[0][0] = 1.0f - 2.0f * (yy + zz);
    M[0][1] = 2.0f * (xy - wz);
    M[0][2] = 2.0f * (xz + wy);

    // Row 1
    M[1][0] = 2.0f * (xy + wz);
    M[1][1] = 1.0f - 2.0f * (xx + zz);
    M[1][2] = 2.0f * (yz - wx);

    // Row 2
    M[2][0] = 2.0f * (xz - wy);
    M[2][1] = 2.0f * (yz + wx);
    M[2][2] = 1.0f - 2.0f * (xx + yy);

    return M;
}

float4 MatrixToQuaternion_Wxyz(float3x3 M)
{
    // We'll return q=(w, x, y, z)
    float4 q;
    
    // Trace = sum of diagonal elements
    float trace = M[0][0] + M[1][1] + M[2][2];

    if (trace > 0.0f)
    {
        // S = 2*w
        float s  = sqrt(trace + 1.0f);
        float w  = 0.5f * s;
        s        = 0.5f / w; // = 1 / (2*w)

        float x  = (M[2][1] - M[1][2]) * s;
        float y  = (M[0][2] - M[2][0]) * s;
        float z  = (M[1][0] - M[0][1]) * s;

        q = float4(w, x, y, z);
    }
    else
    {
        // Find which major diagonal element is largest
        if (M[0][0] > M[1][1] && M[0][0] > M[2][2])
        {
            float s  = sqrt(1.0f + M[0][0] - M[1][1] - M[2][2]);
            float x  = 0.5f * s;
            s        = 0.5f / x;

            float w  = (M[2][1] - M[1][2]) * s;
            float y  = (M[0][1] + M[1][0]) * s;
            float z  = (M[2][0] + M[0][2]) * s;

            q = float4(w, x, y, z);
        }
        else if (M[1][1] > M[2][2])
        {
            float s  = sqrt(1.0f + M[1][1] - M[0][0] - M[2][2]);
            float y  = 0.5f * s;
            s        = 0.5f / y;

            float w  = (M[0][2] - M[2][0]) * s;
            float x  = (M[0][1] + M[1][0]) * s;
            float z  = (M[1][2] + M[2][1]) * s;

            q = float4(w, x, y, z);
        }
        else
        {
            float s  = sqrt(1.0f + M[2][2] - M[0][0] - M[1][1]);
            float z  = 0.5f * s;
            s        = 0.5f / z;

            float w  = (M[1][0] - M[0][1]) * s;
            float x  = (M[0][2] + M[2][0]) * s;
            float y  = (M[1][2] + M[2][1]) * s;

            q = float4(w, x, y, z);
        }
    }

    // Normalize the quaternion to guard against floating precision drift
    q = normalize(q);
    return q;
}
// Quaternion multiplication with standardization
float4 quaternion_multiply(float4 a, float4 b)
{
    float4 raw_product = quaternion_raw_multiply(a, b);
    return standardize_quaternion(raw_product);
}
// Kernel: Compute translations, rotations, and scaling factors for faces
[numthreads(64, 1, 1)]
void CalcFacesTransform(uint3 id : SV_DispatchThreadID)
{


    // Load face vertex indices
    // int3 face = FaceBuffer[id.x];
    int faceIndex = GaussianToFaceBuffer[id.x];  // Map Gaussian to face index
    int3 face = FaceBuffer[faceIndex];  
    // Get face vertices
    float3 v0 = VertexBuffer[face.x];
    float3 v1 = VertexBuffer[face.y];
    float3 v2 = VertexBuffer[face.z];
    
    // v0.x *= -1;
    // v1.x *= -1;
    // v2.x *= -1;

    // Calculate translation (T): Mean of vertices
    float3 T = (v0 + v1 + v2) / 3.0f;
    TBuffer[id.x] = T;

    // Calculate vectors for face edges
    // float3 vec1 = normalize(v1 - v0);
    // float3 vec2 = normalize(v2 - v0);
    // float3 vec1 = v2 - v1;
    // float3 vec2 = v0 - v1;
    // float3 vec3 = v0 - v2;

    // vec1.x *= -1;
    // vec2.x *= -1;
    // vec3.x *= -1;

    float3 vec1 = v2 - v1;
    float3 vec2 = v0 - v1;
    float3 vec3 = v0 - v2;
    // vec1.x *= -1;
    // vec2.x *= -1;
    // vec3.x *= -1;

    // Calculate normal and orthonormal basis
    float3 v12cross = cross(vec1,vec2);


    if (dot(v12cross, cross(vec1, vec2)) < 0.0) {
        v12cross = -v12cross;
    }
    float3 norm = normalize(v12cross);


    vec1 = normalize_safe(vec1);
    float3 prod = normalize(cross(vec1, norm));
    // tempBuffer[id.x * 3 + 0] = prod.x;
    // tempBuffer[id.x * 3 + 1] = prod.y;
    // tempBuffer[id.x * 3 + 2] = prod.z;
    // Build rotation matrix
    float3x3 rotmat = float3x3(vec1, norm, prod);
    rotmat = transpose(rotmat);
    
    // int offset = id.x * 9; // Each rotmat occupies 9 floats
    // tempBuffer[offset + 0] = rotmat[0][0];
    // tempBuffer[offset + 1] = rotmat[0][1];
    // tempBuffer[offset + 2] = rotmat[0][2];
    // tempBuffer[offset + 3] = rotmat[1][0];
    // tempBuffer[offset + 4] = rotmat[1][1];
    // tempBuffer[offset + 5] = rotmat[1][2];
    // tempBuffer[offset + 6] = rotmat[2][0];
    // tempBuffer[offset + 7] = rotmat[2][1];
    // tempBuffer[offset + 8] = rotmat[2][2];

    // Convert rotation matrix to quaternion (R)
    // float4 R = normalize(float4(rotmat[0][0], rotmat[0][1], rotmat[0][2], 0.0));
    float4 R = MatrixToQuaternion(rotmat);
    
    // R = StandardizeQuaternion(R); // Ensure consistent representation

    RBuffer[id.x] = R;
    
    // Calculate area and edge lengths for scaling factor (k)
    float area = length(v12cross);
    float vec3_length = length(vec3);
    float h = area / vec3_length;
    // tempBuffer[id.x] = h + vec3_length;
    
    
    float k = (h + vec3_length) * 0.5 / MAX_SCALE;
        
    kBuffer[id.x] = k;
}

// Kernel: Map Gaussian attributes and update positions
[numthreads(64, 1, 1)]
void MapGaussiansToFaces(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= GaussianToFaceBuffer.Length)
        return;

    
    // int Index = id.x;
  
    // int faceIndex = GaussianToFaceBuffer[id.x];
    // float3 T = TBuffer[faceIndex];
    // float4 R = RBuffer[faceIndex];
    // float k = kBuffer[faceIndex];
    float3 T = TBuffer[id.x];
    float4 R = RBuffer[id.x];
    float k = kBuffer[id.x];
    // if (R.x < 0)
    //     R = - R;
    // Normalize rotation and compute rigid rotation
    float3 gOffset = HahaXyzBuffer[id.x]; // gaussian position offset
    float4 gR = normalize(HahaRotationBuffer[id.x]); // gaussian rotation
    float3 gS = HahaScalingBuffer[id.x]; // gaussian scaling

    // Compute and write to buffers
    GaussianData data;

    // Apply mirroring to rotation
    float4 rot = quaternion_multiply(R, gR);
    
    rot.x *= -1;
    rot.y *= -1;
    data.rotation = rot;
    data.scaling = s_act(gS) * k;

    // Apply mirroring to position
    float3 pos = T + QuaternionApply(R, gOffset) * k;
    
    // float3 pos = T;
    pos.x *= -1; // Mirror position along x-axis
    //  TODO handle a little offset
    // pos.x -= -0.006;
    tempBuffer[id.x] = pos;


    UpdatedScalingBuffer[id.x] =  data.scaling;
    UpdatedXyzBuffer[id.x] = pos;
    UpdatedRotationBuffer[id.x] = rot;
    GaussianDataBuffer[id.x] = data;

    



       
    // tempBuffer[id.x] = gOffset ;


    
}
